# 网关一般是80
server.port=9012

#eureka注册中心首页的Application这一栏
spring.application.name=04-eureka-client-feign-spring-gateway

#每间隔5s，向Eureka服务注册中心发送一次心跳，证明服务是否依然“存活”
eureka.instance.lease-renewal-interval-in-seconds=2
#告诉服务端，如果10s之内没有发送心跳，就代表故障，将本服务踢出
eureka.instance.lease-expiration-duration-in-seconds=10
#告诉服务端，服务实例以IP作为链接，不是取机器名
eureka.instance.prefer-ip-address=false

#注册服务实例ID,，服务ID必须唯一 springcloud-7-service-eureka-gateway
eureka.instance.instance-id=${spring.application.name}:${server.port}
#注册中心的链接地址  http://eureka8761:8761/eureka,http://eureka8762:8762/eureka,http://eureka8763:8763/eureka
eureka.client.service-url.defaultZone=http://01-eureka-server-feign:9100/eureka,http://01-eureka-server-feign-2:9101/eureka

#网关路由配置
#开启网关，默认开启
spring.cloud.gateway.enabled=true
#节点 routes 是一个List 对象，其中 routes 集合中中又包含多个对象，每个对象有三个属性（一个 索引[0]代表一个对象）
#路由 id,没有固定规则，但唯一
spring.cloud.gateway.routes[0].id=02-eureka-client-feign-provider
#匹配后提供服务的路由地址；uri统一资源定位符   url 统一资源标识符
#uri 的协议为 lb（load Balance），表示启用 Gateway 的负载均衡功能
#lb://serviceName 是 spring cloud gateway 在微服务中自动为我们创建的负载均衡 uri；serviceName要和启动的微服务名保持一致
spring.cloud.gateway.routes[0].uri=lb://02-eureka-client-feign-provider
#spring.cloud.gateway.routes[0].uri=http://localhost:9001
#以下是断言条件，必选全部符合条件；断言是给某一个路由来设定的一种匹配规则 默认不能作用在动态路由上
#断言，路径匹配，只要Path匹配上了/doLogin 就往 uri 转发 并且将路径带上 注意：Path 中 P 为大写
#也可以全局匹配，如 /service/**
spring.cloud.gateway.routes[0].predicates[0]=Path=/api-gateway/**
#只能是 GET,POST 请求时，才能访问
spring.cloud.gateway.routes[0].predicates[1]=Method=GET,POST

# 这个是过滤器的名称
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# 这个过滤器的参数
# 用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象
#spring.cloud.gateway.routes[0].filters[0].args.key-resolver=#{@apiKeyResolver}
# 生成令牌的速度，令牌桶每秒填充平均速率
#spring.cloud.gateway.routes[0].filters[0].args.redis-rate-limiter.replenishRate=1
# 令牌桶总容量
#spring.cloud.gateway.routes[0].filters[0].args.redis-rate-limiter.burstCapacity=3


#配置第二个路由规则

#表明gateway开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务
spring.cloud.gateway.discovery.locator.enabled=true
#是将请求路径上的服务名配置为小写（服务注册的时候，向注册中心注册时将服务名转成大写了），如以/service/*的请求路径被路由转发到服务名为service的服务上
spring.cloud.gateway.discovery.locator.lower-case-service-id=true